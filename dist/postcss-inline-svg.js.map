{"version":3,"file":null,"sources":["../src/parseRule.js","../src/parseDecl.js","../src/resolveId.js","../src/render.js","../src/defaults.js","../src/processors.js","../src/load.js","../src/index.js"],"sourcesContent":["import valueParser from 'postcss-value-parser';\n\nexport function parseRuleDefinition(params) {\n    const { nodes } = valueParser(params);\n    if (nodes.length !== 3 ||\n        nodes[0].type !== 'word' ||\n        nodes[1].type !== 'space' ||\n        nodes[2].type !== 'function' ||\n        nodes[2].value !== 'url' ||\n        nodes[2].nodes.length === 0\n    ) {\n        throw Error('Invalid \"@svg-load\" definition');\n    }\n    return {\n        name: nodes[0].value,\n        url: nodes[2].nodes[0].value\n    };\n}\n\nexport function getRuleParams(rule) {\n    const params = {};\n    const selectors = {};\n\n    rule.each(node => {\n        if (node.type === 'decl') {\n            params[node.prop] = node.value;\n        } else if (node.type === 'rule') {\n            const selector = selectors[node.selectors] || {};\n            node.each(child => {\n                if (child.type === 'decl') {\n                    selector[child.prop] = child.value;\n                }\n            });\n            selectors[node.selectors] = selector;\n        }\n    });\n\n    return {\n        params,\n        selectors\n    };\n}\n","import valueParser, { stringify } from 'postcss-value-parser';\n\nconst invalidDeclLoad = `Invalid \"svg-load()\" definition`;\n\nfunction getUrl(nodes) {\n    let url = '';\n    let urlEnd = 0;\n\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.type === 'string') {\n            if (i !== 0) {\n                throw Error(invalidDeclLoad);\n            }\n            url = node.value;\n            urlEnd = i + 1;\n            break;\n        }\n        if (node.type === 'div' && node.value === ',') {\n            if (i === 0) {\n                throw Error(invalidDeclLoad);\n            }\n            urlEnd = i;\n            break;\n        }\n        url += stringify(node);\n        urlEnd += 1;\n    }\n\n    return {\n        url,\n        urlEnd\n    };\n}\n\nfunction getParamChunks(nodes) {\n    const list = [];\n    const lastArg = nodes.reduce((arg, node) => {\n        if (node.type === 'word' || node.type === 'string') {\n            return arg + node.value;\n        }\n        if (node.type === 'space') {\n            return arg + ' ';\n        }\n        if (node.type === 'div' && node.value === ',') {\n            list.push(arg);\n            return '';\n        }\n        return arg + stringify(node);\n    }, '');\n\n    return list.concat(lastArg);\n}\n\nfunction splitParams(list) {\n    const params = {};\n\n    list.reduce((sep, arg) => {\n        if (!arg) {\n            throw Error(invalidDeclLoad);\n        }\n\n        if (!sep) {\n            if (arg.indexOf(':') !== -1) {\n                sep = ':';\n            } else if (arg.indexOf('=') !== -1) {\n                sep = '=';\n            } else {\n                throw Error(`Expected \":\" or \"=\" separator in \"${arg}\"`);\n            }\n        }\n\n        const pair = arg.split(sep);\n        if (pair.length !== 2) {\n            throw Error(`Expected \"${sep}\" separator in \"${arg}\"`);\n        }\n        params[pair[0].trim()] = pair[1].trim();\n\n        return sep;\n    }, null);\n\n    return params;\n}\n\nfunction getLoader(parsedValue, valueNode) {\n    if (!valueNode.nodes.length) {\n        throw Error(invalidDeclLoad);\n    }\n\n    // parse url\n    const { url, urlEnd } = getUrl(valueNode.nodes);\n\n    // parse params\n    const paramsNodes = valueNode.nodes.slice(urlEnd + 1);\n    const params = urlEnd !== valueNode.nodes.length ? splitParams(getParamChunks(paramsNodes)) : {};\n\n    return {\n        url,\n        params,\n        valueNode,\n        parsedValue\n    };\n}\n\nfunction getInliner(parsedValue, valueNode) {\n    if (!valueNode.nodes.length) {\n        throw Error(`Invalid \"svg-inline()\" statement`);\n    }\n    const name = valueNode.nodes[0].value;\n\n    return {\n        name,\n        valueNode,\n        parsedValue\n    };\n}\n\nexport function parseDeclValue(value) {\n    const loaders = [];\n    const inliners = [];\n    const parsedValue = valueParser(value);\n\n    parsedValue.walk(valueNode => {\n        if (valueNode.type === 'function') {\n            if (valueNode.value === 'svg-load') {\n                loaders.push(getLoader(parsedValue, valueNode));\n            } else if (valueNode.value === 'svg-inline') {\n                inliners.push(getInliner(parsedValue, valueNode));\n            }\n        }\n    });\n\n    return {\n        loaders,\n        inliners\n    };\n}\n","import { dirname, resolve } from 'path';\n\nexport default function resolveId(file, url, opts) {\n    if (opts.path) {\n        return resolve(opts.path, url);\n    }\n    if (file) {\n        return resolve(dirname(file), url);\n    }\n    return resolve(url);\n}\n","import { parseDOM } from 'htmlparser2';\nimport serialize from 'dom-serializer';\n\nexport default function render(code, ...processors) {\n    const dom = parseDOM(code, { xmlMode: true });\n\n    processors.forEach(processor => processor(dom));\n\n    return serialize(dom);\n}\n","export function encode(code) {\n    return code\n        .replace(/%/g, '%25')\n        .replace(/</g, '%3C')\n        .replace(/>/g, '%3E')\n        .replace(/&/g, '%26')\n        .replace(/#/g, '%23');\n}\n\nfunction normalize(code) {\n    return code\n        .replace(/'/g, '%22')\n        .replace(/\"/g, '\\'')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n\nexport function transform(code) {\n    return `\"data:image/svg+xml;charset=utf-8,${normalize(code)}\"`;\n}\n","import { selectOne, selectAll } from 'css-select';\n\nfunction matchId(exp, id) {\n    return exp instanceof RegExp ? exp.test(id) : Boolean(exp);\n}\n\nfunction removeFillAttrib(element) {\n    delete element.attribs.fill;\n}\n\nexport function removeFill(id, opts) {\n    return dom => {\n        if (matchId(opts.removeFill, id)) {\n            selectAll('[fill]', dom).forEach(removeFillAttrib);\n        }\n    };\n}\n\nfunction applyParams(params) {\n    return ({ attribs }) => {\n        Object.keys(params).forEach(name => {\n            attribs[name] = params[name];\n        });\n    };\n}\n\nexport function applyRootParams(params) {\n    return dom => {\n        applyParams(params)(selectOne('svg', dom));\n    };\n}\n\nexport function applySelectedParams(selectors) {\n    return dom => {\n        const svg = selectOne('svg', dom);\n\n        Object.keys(selectors).forEach(selector => {\n            selectAll(selector, svg).forEach(applyParams(selectors[selector]));\n        });\n    };\n}\n","import { readFile } from 'fs';\nimport render from './render.js';\nimport { transform, encode } from './defaults.js';\nimport { removeFill, applyRootParams, applySelectedParams } from './processors.js';\n\nfunction read(id) {\n    return new Promise((resolve, reject) => {\n        readFile(id, 'utf-8', (err, data) => {\n            if (err) {\n                reject(Error(`Can't load '${id}'`));\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n\nexport default function load(id, params, selectors, opts) {\n    const processors = [\n        removeFill(id, opts),\n        applyRootParams(params),\n        applySelectedParams(selectors)\n    ];\n    return read(id).then(data => {\n        let code = render(data, ...processors);\n\n        if (opts.base64) {\n            let converted = new Buffer(code);\n            code = \"\\\"data:image/svg+xml;base64,\" + converted.toString('base64') + \"\\\"\";\n        } else {\n            if (opts.encode !== false) {\n                code = (opts.encode || encode)(code);\n            }\n\n            if (opts.transform !== false) {\n                code = (opts.transform || transform)(code, id);\n            }\n        }\n\n        return code;\n    });\n}\n","import postcss from 'postcss';\nimport { parseRuleDefinition, getRuleParams } from './parseRule.js';\nimport { parseDeclValue } from './parseDecl.js';\nimport resolveId from './resolveId.js';\nimport load from './load.js';\n\nfunction removeLoader(loader) {\n    if (!loader.error && loader.node.type === 'atrule') {\n        loader.node.remove();\n    }\n}\n\nfunction applyInliner(inliner) {\n    if (!inliner.loader.error) {\n        inliner.valueNode.value = 'url';\n        inliner.valueNode.nodes = [{\n            type: 'word',\n            value: inliner.loader.svg\n        }];\n    }\n}\n\nfunction stringifyInliner(inliner) {\n    if (!inliner.loader.error) {\n        inliner.node.value = String(inliner.parsedValue);\n    }\n}\n\nexport default postcss.plugin('postcss-inline-svg', (opts = {}) => (css, result) => {\n    const loadersMap = {};\n    const loaders = [];\n    const inliners = [];\n\n    css.walk(node => {\n        if (node.type === 'atrule') {\n            if (node.name === 'svg-load') {\n                try {\n                    const file = node.source && node.source.input && node.source.input.file;\n                    const { name, url } = parseRuleDefinition(node.params);\n                    const { params, selectors } = getRuleParams(node);\n                    const loader = {\n                        id: resolveId(file, url, opts),\n                        parent: file,\n                        params,\n                        selectors,\n                        node\n                    };\n                    loaders.push(loader);\n                    loadersMap[name] = loader;\n                } catch (e) {\n                    node.warn(result, e.message);\n                }\n            }\n        } else if (node.type === 'decl') {\n            if (node.value.indexOf('svg-load(') !== -1 ||\n                node.value.indexOf('svg-inline(') !== -1\n            ) {\n                try {\n                    const file = node.source && node.source.input && node.source.input.file;\n                    const statements = parseDeclValue(node.value);\n                    statements.loaders.forEach(({ url, params, valueNode, parsedValue }) => {\n                        const loader = {\n                            id: resolveId(file, url, opts),\n                            parent: file,\n                            params,\n                            selectors: {},\n                            node\n                        };\n                        loaders.push(loader);\n                        inliners.push({\n                            loader,\n                            node,\n                            valueNode,\n                            parsedValue\n                        });\n                    });\n                    statements.inliners.forEach(({ name, valueNode, parsedValue }) => {\n                        const loader = loadersMap[name];\n                        if (loader) {\n                            inliners.push({\n                                loader,\n                                node,\n                                valueNode,\n                                parsedValue\n                            });\n                        } else {\n                            node.warn(result, `\"${name}\" svg is not defined`);\n                        }\n                    });\n                } catch (e) {\n                    node.warn(result, e.message);\n                }\n            }\n        }\n    });\n\n    const promises = loaders.map(loader => {\n        return load(loader.id, loader.params, loader.selectors, opts).then(code => {\n            loader.svg = code;\n            result.messages.push({\n                type: 'dependency',\n                file: loader.id,\n                parent: loader.parent\n            });\n        }).catch(err => {\n            loader.error = true;\n            loader.node.warn(result, err.message);\n        });\n    });\n\n    return Promise.all(promises).then(() => {\n        loaders.forEach(removeLoader);\n        inliners.forEach(applyInliner);\n        inliners.forEach(stringifyInliner);\n    });\n});\n"],"names":["valueParser","const","let","stringify","resolve","dirname","parseDOM","selectAll","selectOne","readFile","file"],"mappings":";;;;;;;;;;;;;AAEO,SAAS,mBAAmB,CAAC,MAAM,EAAE;IACxC,OAAe,GAAGA,oBAAW,CAAC,MAAM,CAAC;IAA7B,IAAA,KAAK,aAAP;IACN,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;QAClB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM;QACxB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO;QACzB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU;QAC5B,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK;QACxB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;MAC7B;QACE,MAAM,KAAK,CAAC,gCAAgC,CAAC,CAAC;KACjD;IACD,OAAO;QACH,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK;QACpB,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK;KAC/B,CAAC;CACL;;AAED,AAAO,SAAS,aAAa,CAAC,IAAI,EAAE;IAChCC,IAAM,MAAM,GAAG,EAAE,CAAC;IAClBA,IAAM,SAAS,GAAG,EAAE,CAAC;;IAErB,IAAI,CAAC,IAAI,CAAC,UAAA,IAAI,EAAC;QACX,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;SAClC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;YAC7BA,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACjD,IAAI,CAAC,IAAI,CAAC,UAAA,KAAK,EAAC;gBACZ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE;oBACvB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;iBACtC;aACJ,CAAC,CAAC;YACH,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;SACxC;KACJ,CAAC,CAAC;;IAEH,OAAO;QACH,QAAA,MAAM;QACN,WAAA,SAAS;KACZ,CAAC;CACL;;ACvCDA,IAAM,eAAe,GAAG,mCAAgC,CAAE;;AAE1D,SAAS,MAAM,CAAC,KAAK,EAAE;IACnBC,IAAI,GAAG,GAAG,EAAE,CAAC;IACbA,IAAI,MAAM,GAAG,CAAC,CAAC;;IAEf,KAAKA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QACtCD,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,EAAE;gBACT,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;aAChC;YACD,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;YACjB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;YACf,MAAM;SACT;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,EAAE;gBACT,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;aAChC;YACD,MAAM,GAAG,CAAC,CAAC;YACX,MAAM;SACT;QACD,GAAG,IAAIE,qBAAS,CAAC,IAAI,CAAC,CAAC;QACvB,MAAM,IAAI,CAAC,CAAC;KACf;;IAED,OAAO;QACH,KAAA,GAAG;QACH,QAAA,MAAM;KACT,CAAC;CACL;;AAED,SAAS,cAAc,CAAC,KAAK,EAAE;IAC3BF,IAAM,IAAI,GAAG,EAAE,CAAC;IAChBA,IAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,EAAE;QACrC,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YAChD,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;SAC3B;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACvB,OAAO,GAAG,GAAG,GAAG,CAAC;SACpB;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACf,OAAO,EAAE,CAAC;SACb;QACD,OAAO,GAAG,GAAGE,qBAAS,CAAC,IAAI,CAAC,CAAC;KAChC,EAAE,EAAE,CAAC,CAAC;;IAEP,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;CAC/B;;AAED,SAAS,WAAW,CAAC,IAAI,EAAE;IACvBF,IAAM,MAAM,GAAG,EAAE,CAAC;;IAElB,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,EAAE;QACnB,IAAI,CAAC,GAAG,EAAE;YACN,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;SAChC;;QAED,IAAI,CAAC,GAAG,EAAE;YACN,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzB,GAAG,GAAG,GAAG,CAAC;aACb,MAAM,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBAChC,GAAG,GAAG,GAAG,CAAC;aACb,MAAM;gBACH,MAAM,KAAK,CAAC,CAAA,yCAAmC,GAAE,GAAG,OAAE,CAAC,CAAC,CAAC;aAC5D;SACJ;;QAEDA,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,MAAM,KAAK,CAAC,CAAA,aAAW,GAAE,GAAG,uBAAiB,GAAE,GAAG,OAAE,CAAC,CAAC,CAAC;SAC1D;QACD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;;QAExC,OAAO,GAAG,CAAC;KACd,EAAE,IAAI,CAAC,CAAC;;IAET,OAAO,MAAM,CAAC;CACjB;;AAED,SAAS,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE;IACvC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE;QACzB,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;KAChC;;;IAGD,OAAqB,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;IAAvC,IAAA,GAAG;IAAE,IAAA,MAAM,cAAb;;;IAGNA,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACtDA,IAAM,MAAM,GAAG,MAAM,KAAK,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC;;IAEjG,OAAO;QACH,KAAA,GAAG;QACH,QAAA,MAAM;QACN,WAAA,SAAS;QACT,aAAA,WAAW;KACd,CAAC;CACL;;AAED,SAAS,UAAU,CAAC,WAAW,EAAE,SAAS,EAAE;IACxC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE;QACzB,MAAM,KAAK,CAAC,oCAAiC,CAAE,CAAC;KACnD;IACDA,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;;IAEtC,OAAO;QACH,MAAA,IAAI;QACJ,WAAA,SAAS;QACT,aAAA,WAAW;KACd,CAAC;CACL;;AAED,AAAO,SAAS,cAAc,CAAC,KAAK,EAAE;IAClCA,IAAM,OAAO,GAAG,EAAE,CAAC;IACnBA,IAAM,QAAQ,GAAG,EAAE,CAAC;IACpBA,IAAM,WAAW,GAAGD,oBAAW,CAAC,KAAK,CAAC,CAAC;;IAEvC,WAAW,CAAC,IAAI,CAAC,UAAA,SAAS,EAAC;QACvB,IAAI,SAAS,CAAC,IAAI,KAAK,UAAU,EAAE;YAC/B,IAAI,SAAS,CAAC,KAAK,KAAK,UAAU,EAAE;gBAChC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;aACnD,MAAM,IAAI,SAAS,CAAC,KAAK,KAAK,YAAY,EAAE;gBACzC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;aACrD;SACJ;KACJ,CAAC,CAAC;;IAEH,OAAO;QACH,SAAA,OAAO;QACP,UAAA,QAAQ;KACX,CAAC;CACL;;ACtIc,SAAS,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;IAC/C,IAAI,IAAI,CAAC,IAAI,EAAE;QACX,OAAOI,YAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAClC;IACD,IAAI,IAAI,EAAE;QACN,OAAOA,YAAO,CAACC,YAAO,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KACtC;IACD,OAAOD,YAAO,CAAC,GAAG,CAAC,CAAC;CACvB;;ACPc,SAAS,MAAM,CAAC,IAAI,EAAiB;;;;IAChDH,IAAM,GAAG,GAAGK,oBAAQ,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE9C,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS,EAAC,SAAG,SAAS,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;;IAEhD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;CACzB;;ACTM,SAAS,MAAM,CAAC,IAAI,EAAE;IACzB,OAAO,IAAI;SACN,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;SACpB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;SACpB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;SACpB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;SACpB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CAC7B;;AAED,SAAS,SAAS,CAAC,IAAI,EAAE;IACrB,OAAO,IAAI;SACN,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;SACpB,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;SACnB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;SACpB,IAAI,EAAE,CAAC;CACf;;AAED,AAAO,SAAS,SAAS,CAAC,IAAI,EAAE;IAC5B,OAAO,CAAA,qCAAmC,IAAE,SAAS,CAAC,IAAI,CAAC,CAAA,OAAE,CAAC,CAAC;CAClE;;ACjBD,SAAS,OAAO,CAAC,GAAG,EAAE,EAAE,EAAE;IACtB,OAAO,GAAG,YAAY,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;CAC9D;;AAED,SAAS,gBAAgB,CAAC,OAAO,EAAE;IAC/B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;CAC/B;;AAED,AAAO,SAAS,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE;IACjC,OAAO,UAAA,GAAG,EAAC;QACP,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;YAC9BC,mBAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;SACtD;KACJ,CAAC;CACL;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE;IACzB,OAAO,UAAC,GAAA,EAAa;YAAX,OAAO;;QACb,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,EAAC;YAC7B,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;SAChC,CAAC,CAAC;KACN,CAAC;CACL;;AAED,AAAO,SAAS,eAAe,CAAC,MAAM,EAAE;IACpC,OAAO,UAAA,GAAG,EAAC;QACP,WAAW,CAAC,MAAM,CAAC,CAACC,mBAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;KAC9C,CAAC;CACL;;AAED,AAAO,SAAS,mBAAmB,CAAC,SAAS,EAAE;IAC3C,OAAO,UAAA,GAAG,EAAC;QACPP,IAAM,GAAG,GAAGO,mBAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;QAElC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAC;YACpCD,mBAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACtE,CAAC,CAAC;KACN,CAAC;CACL;;ACnCD,SAAS,IAAI,CAAC,EAAE,EAAE;IACd,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAE;QACjCE,WAAQ,CAAC,EAAE,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE;YAC9B,IAAI,GAAG,EAAE;gBACL,MAAM,CAAC,KAAK,CAAC,CAAA,cAAa,GAAE,EAAE,MAAE,CAAC,CAAC,CAAC,CAAC;aACvC,MAAM;gBACH,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB;SACJ,CAAC,CAAC;KACN,CAAC,CAAC;CACN;;AAED,AAAe,SAAS,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE;IACtDR,IAAM,UAAU,GAAG;QACf,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC;QACpB,eAAe,CAAC,MAAM,CAAC;QACvB,mBAAmB,CAAC,SAAS,CAAC;KACjC,CAAC;IACF,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,EAAC;QACtBC,IAAI,IAAI,GAAG,MAAM,MAAA,CAAC,UAAA,IAAI,WAAE,UAAa,EAAA,CAAC,CAAC;;QAEvC,IAAI,IAAI,CAAC,MAAM,EAAE;YACbA,IAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;YACjC,IAAI,GAAG,8BAA8B,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;SAC/E,MAAM;YACH,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;gBACvB,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;aACxC;;YAED,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE;gBAC1B,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAClD;SACJ;;QAED,OAAO,IAAI,CAAC;KACf,CAAC,CAAC;CACN;;ACnCD,SAAS,YAAY,CAAC,MAAM,EAAE;IAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;QAChD,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;KACxB;CACJ;;AAED,SAAS,YAAY,CAAC,OAAO,EAAE;IAC3B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;QACvB,OAAO,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QAChC,OAAO,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC;YACvB,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG;SAC5B,CAAC,CAAC;KACN;CACJ;;AAED,SAAS,gBAAgB,CAAC,OAAO,EAAE;IAC/B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;QACvB,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;KACpD;CACJ;;AAED,YAAe,OAAO,CAAC,MAAM,CAAC,oBAAoB,EAAE,UAAC,IAAS,EAAE;+BAAP,GAAG,EAAE;;qBAAM,GAAG,EAAE,MAAM,EAAE;IAC7ED,IAAM,UAAU,GAAG,EAAE,CAAC;IACtBA,IAAM,OAAO,GAAG,EAAE,CAAC;IACnBA,IAAM,QAAQ,GAAG,EAAE,CAAC;;IAEpB,GAAG,CAAC,IAAI,CAAC,UAAA,IAAI,EAAC;QACV,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACxB,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;gBAC1B,IAAI;oBACAA,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;oBACxE,OAAmB,GAAG,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;oBAA9C,IAAA,IAAI;oBAAE,IAAA,GAAG,WAAX;oBACN,SAA2B,GAAG,aAAa,CAAC,IAAI,CAAC;oBAAzC,IAAA,MAAM;oBAAE,IAAA,SAAS,mBAAnB;oBACNA,IAAM,MAAM,GAAG;wBACX,EAAE,EAAE,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;wBAC9B,MAAM,EAAE,IAAI;wBACZ,QAAA,MAAM;wBACN,WAAA,SAAS;wBACT,MAAA,IAAI;qBACP,CAAC;oBACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACrB,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;iBAC7B,CAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;iBAChC;aACJ;SACJ,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;YAC7B,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;cAC1C;gBACE,IAAI;oBACAA,IAAMS,MAAI,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;oBACxET,IAAM,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC9C,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,GAAA,EAAyC;4BAAvC,GAAG,WAAE;4BAAA,MAAM,cAAE;4BAAA,SAAS,iBAAE;4BAAA,WAAW;;wBAC7DA,IAAM,MAAM,GAAG;4BACX,EAAE,EAAE,SAAS,CAACS,MAAI,EAAE,GAAG,EAAE,IAAI,CAAC;4BAC9B,MAAM,EAAEA,MAAI;4BACZ,QAAA,MAAM;4BACN,SAAS,EAAE,EAAE;4BACb,MAAA,IAAI;yBACP,CAAC;wBACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACrB,QAAQ,CAAC,IAAI,CAAC;4BACV,QAAA,MAAM;4BACN,MAAA,IAAI;4BACJ,WAAA,SAAS;4BACT,aAAA,WAAW;yBACd,CAAC,CAAC;qBACN,CAAC,CAAC;oBACH,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAA,EAAkC;4BAAhC,IAAI,YAAE;4BAAA,SAAS,iBAAE;4BAAA,WAAW;;wBACvDT,IAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;wBAChC,IAAI,MAAM,EAAE;4BACR,QAAQ,CAAC,IAAI,CAAC;gCACV,QAAA,MAAM;gCACN,MAAA,IAAI;gCACJ,WAAA,SAAS;gCACT,aAAA,WAAW;6BACd,CAAC,CAAC;yBACN,MAAM;4BACH,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAA,IAAE,GAAE,IAAI,0BAAqB,CAAC,CAAC,CAAC;yBACrD;qBACJ,CAAC,CAAC;iBACN,CAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;iBAChC;aACJ;SACJ;KACJ,CAAC,CAAC;;IAEHA,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,EAAC;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,EAAC;YACpE,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC;YAClB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACjB,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,MAAM,CAAC,EAAE;gBACf,MAAM,EAAE,MAAM,CAAC,MAAM;aACxB,CAAC,CAAC;SACN,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG,EAAC;YACT,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;SACzC,CAAC,CAAC;KACN,CAAC,CAAC;;IAEH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAG;QACjC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC9B,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;KACtC,CAAC,CAAC;CACN;CAAA,CAAC,CAAC;;"}